- case @open_sharing_widget
- when "facebook"
  #hidden-widget{:style => "display: none"}
    = render_cell :share_question, :display, :question => @question, :recently_connected_to => "facebook"
  :javascript
    $(document).ready(function () {
      Utils.modal({html: $("#hidden-widget").html()});
    });

- @current_class = 'question hentry entry post'

- question_body = find_and_preserve(shapado_auto_link(Rails.cache.fetch("rendered_question_#{@question.id}_#{@question.updated_at}"){ markdown(@question.body.present? ? @question.body : '') }))

- source = question_path(@question)

- content_for :js do
  = render :partial => "shared/layout/javascript/show"
  = javascript_include_tag "jquery.colorbox-min"

- content_for :head do
  %meta{:name => "keywords", :content => clean_seo_keywords(@question.topics.map(&:title).dup, @question.title)}
  %meta{:name => "description", :content => question_body.gsub(/<\/?[^>]*>/, "")[0, 255] }
  %link{:rel => "canonical", :href => question_url(@question) }

= error_messages_for 'answer'

#question.commentable

  %h1.navtitle.title.entry-title.question-title-col
    &= @question.title
    - if @question.closed
      = " [#{t("closed", :scope => "activerecord.attributes.question").upcase}]"

  .body-col
    .body.markdown
      - if @question.closed && @question.close_reason
        .close_reason
          = t(".close_reason")
          = t(@question.close_reason.reason, :scope=>"close_requests.form")
          - if !@question.close_reason.comment.empty?
            .comment
              = find_and_preserve(shapado_auto_link(@question.close_reason.comment))
      .post-text.entry-content
        = question_body

    %ul.topic-list
      - @question.topics.each do |topic|
        = render :partial => "topics/box", :locals => {:topic => topic, :question => @question}
      - if logged_in? && (current_user.can_modify?(@question) || current_user.can_retag_others_questions_on?(current_group))
        %li.retag
          %a.reclassify{:href => "#"}
            %span.empty= t(".tag")
            %span.not-empty= t(".retag")
    = text_field "topics", "", :class => "", :id => "reclassify-autocomplete", :value => t("searches.form.select_topics")
    %a.add-topic{:href => "#"}= t("scaffold.add")
    %a.cancel-reclassify{:href => "#"}= t("scaffold.done")
    %ul#reclassify-suggestions.autocomplete-list

    .controls
      .actions
        - if logged_in?
          - if flag = current_user.has_flagged?(@question)
            %span.flagged= "#{t('.flagged_as')} #{t(flag.type, :scope=>'flags.form')}"
          - else
            = link_to t(".flag"), flag_question_path(@question), :class => "flag-link", :id => "question_flag_link", :rel => 'nofollow'

          - if (current_user.can_modify?(@question) || current_user.owner_of?(@question.group))
            = link_to t("scaffold.destroy"), question_path(@question.id), :confirm => "are you sure?", :method => :delete

          - if current_user.mod_of?(@question.group)
            = link_to t(".ban"), ban_path(:question_ids => [@question.id]), :class => "button", :confirm => "are you sure?"
        - if @question.versions.count > 0
          = link_to t("wiki.history.link", :default => "history"), history_question_path(@question)

        - if logged_in?
          - if (@question.wiki && current_user.can_edit_wiki_post_on?(@question.group)) || current_user.can_edit_others_posts_on?(@question.group) || current_user.can_modify?(@question)
            = link_to t('scaffold.edit'), edit_question_path(@question), :class => "button"

        = link_to t('.add_follow_up_question'), new_question_path(:question => @follow_up_question), :target => '_blank', :id => 'add_follow_up_question'

        #question_flag_div

  = render :partial => "shared/comments", :locals => {:commentable => @question, :source => source, :path_scope => [@question]}

#answers
  .hentry
    - @answers.each do |answer|
      = cache("rendered_answer_#{answer.id}_#{answer.updated_at}") do
        = render :partial=> "answer", :locals=> {:question => @question, :answer => answer}
  = will_paginate(@answers)

-# New answer form
- unless @question.closed
  - if logged_in?
    #new-answer-wrapper
      = form_for @answer, :url => question_answers_path(@question.id), :html => {:class => "form mainAnswerForm bp"} do |f|
        = render :partial => "answers/form", :locals => {:f => f, :markdown => true}
        .group.navform
          = submit_tag t("answers.form.submit"), :class => "button"
  - else
    %p= t("answers.form.not_logged", :link => new_user_session_path)

- content_for :sidebar do
  - if logged_in? && current_user != @question.user
    -# Can watch the question
    .follow-info.block.question
      - if @question.watch_for?(current_user)
        = link_to t("followable.unfollow"), unwatch_question_path(@question), :class => "unfollow_link", "data-class" => "follow_link", "data-title" => t("followable.follow"), "data-undo" => watch_question_path(@question)
      - else
        = link_to t("followable.follow"), watch_question_path(@question), :class => "follow_link", "data-class" => "unfollow_link", "data-title" => t("followable.unfollow"), "data-undo" => unwatch_question_path(@question)

  - if logged_in? && (current_user.mod_of?(current_group) || current_user.can_view_offensive_counts_on?(current_group))
    - unless @question.flags.count == 0
      .block
        %h3= t(:flags, :scope => "activerecord.models")
        .content= render :partial => "flags/list", :locals => {:flaggeable => @question}

    - unless @question.close_requests.size == 0
      .block
        %h3= t(:prural_name, :scope => "close_requests.model")
        .content= render :partial => "close_requests/list", :locals => {:question => @question}

  - related_questions = Question.related_questions(@question, :language => find_languages, :per_page => 3)
  - if @follow_up_questions.present?
    .block
      %h3
        = t(".follow_up_questions")
      .content
        %ul.list
          - @follow_up_questions.each do |q|
            %li= link_to h(q.title), question_path(q), :title => truncate(strip_tags(q.body), :length => 200)

  - if !related_questions.empty?
    .block
      %h3= t(".related_questions")
      .content
        %ul.list
          - related_questions.each do |rq|
            %li= link_to h(rq.title), question_path(rq), :title => truncate(strip_tags(rq.body), :length => 200)
  - if logged_in?
    .share.block
      %h3= t("questions.show.share")
      = link_to(image_tag("facebook.gif") + " Facebook", new_share_question_path(:question => @question.id, :where => "facebook"), :class => "facebook")


  #question-followers.block.followers
    %h2.count
      = t("followable.followers.question", :count => @question.watchers.count)
    = render_cell :users, :list, :users => User.query(:id.in => @question.watchers)


  .audience-size
    = t('.topic_followers',
        :count => @question.topics.map{|t| t.follower_ids.size }.inject(0) {|sum, count| sum + count})
